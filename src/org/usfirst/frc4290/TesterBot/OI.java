// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4290.TesterBot;

import org.usfirst.frc4290.TesterBot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc4290.TesterBot.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton moveBackwardButton;
    public JoystickButton rollerThrow;
    public Joystick joystickLeft;
    public JoystickButton midSpeedButton;
    public JoystickButton lowSpeedButton;
    public JoystickButton highSpeedButton;
    public JoystickButton rollerGrab;
    public JoystickButton raiseClimber;
    public JoystickButton lowerClimber;
    public Joystick joystickRight;
    public JoystickButton turnAround;
    public JoystickButton testLeft;
    public JoystickButton testRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystickRight = new Joystick(1);
        
        
        highSpeedButton = new JoystickButton(joystickRight, 5);
        highSpeedButton.whenPressed(new HighSpeed());
        lowSpeedButton = new JoystickButton(joystickRight, 4);
        lowSpeedButton.whenPressed(new LowSpeed());
        midSpeedButton = new JoystickButton(joystickRight, 9);
        midSpeedButton.whenPressed(new MidSpeed());
        raiseClimber = new JoystickButton(joystickRight, 3);
        raiseClimber.whileHeld(new RaiseClimber());
        lowerClimber = new JoystickButton(joystickRight, 2);
        lowerClimber.whileHeld(new LowerClimber());
//        lowerClimber.whenReleased(new StopClimber());
//        raiseClimber.whenReleased(new StopClimber());
        turnAround = new JoystickButton(joystickRight, 7);
        turnAround.whenPressed(new TurnAround());
        
        joystickLeft = new Joystick(0);
        
        rollerThrow = new JoystickButton(joystickLeft, 3);
        rollerThrow.whileHeld(new ThrowBall(0.0));
        rollerGrab = new JoystickButton(joystickLeft, 2);
        rollerGrab.whileHeld(new GrabBall(0.0));
        moveBackwardButton = new JoystickButton(joystickLeft, 32);
        moveBackwardButton.whileHeld(new MoveBackward(0.0));
        
        
        testRight = new JoystickButton(joystickLeft, 9);
        testRight.whenPressed(new TestRightGyroTurn());
        testLeft = new JoystickButton(joystickLeft, 8);
        testLeft.whenPressed(new TestLeftGyroTurn());
        
        
        // SmartDashboard Buttons

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystickLeft() {
        return joystickLeft;
    }

    public Joystick getJoystickRight() {
        return joystickRight;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

