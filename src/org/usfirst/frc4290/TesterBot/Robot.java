// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4290.TesterBot;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4290.TesterBot.commands.*;
import org.usfirst.frc4290.TesterBot.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    //public static RollerSub rollerSub;
    public static RollerVictor rollerVictor;
    public static Pneumatics pneumatics;
    public static ClimberJaguar jaguar;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static CameraServer camera;
    SendableChooser autoChooser;
    public static SendableChooser autoChooserTwo;
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        //rollerSub = new RollerSub();
        rollerVictor = new RollerVictor();
        pneumatics = new Pneumatics();
        jaguar = new ClimberJaguar();
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autoChooser = new SendableChooser();
        autoChooser.addObject("Low Bar",new AutoDefensePosition1());
        autoChooser.addObject("Rough Terrain",new AutoRoughTerrain());
        autoChooser.addObject("Threshold",new AutoThreshold());
        autoChooser.addObject("Fly", new AutoRamp());
        autoChooser.addObject("Chival De Frise", new AutoChivalDeFrise());
        autoChooser.addObject("Portcullis", new AutoPortcullis());
        autoChooser.addObject("Ramparts",new AutoRamparts());
        SmartDashboard.putData("Auto Options", autoChooser);
        
        
        autoChooserTwo = new SendableChooser();
        autoChooserTwo.addObject("None","");
        autoChooserTwo.addObject("Score Left",new AutoScore());
        autoChooserTwo.addObject("Score Right", new AutoScoreRight());
        autoChooserTwo.addObject("Return",new AutoReturn());
        autoChooserTwo.addObject("Turn and Return",new AutoTurnReturn());
        SmartDashboard.putData("Auto Options Two", autoChooserTwo);
//        autonomousCommand = new CommandGroup1();
//        autonomousCommand = new AutoDefensePosition1();
//        autonomousCommand = new AutoRoughTerrain();
//        autonomousCommand = new AutoThreshold();
        
//     END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        pneumatics.startCompressor();
        
//        camera = CameraServer.getInstance();
//        camera.startAutomaticCapture("cam0");
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
//    	AutoDefense .65
//    	Rough .75
//    	Threshold .55
//        if (autonomousCommand != null) {
    	
    	autonomousCommand = (Command) autoChooser.getSelected();
    	if(autoChooser.getSelected().toString().equals("AutoDefensePosition1")){
        	Robot.driveTrain.speedMultiplier = 0.65;
    	}
    	else if (autoChooser.getSelected().toString().equals("AutoRoughTerrain")){
        	Robot.driveTrain.speedMultiplier = 0.75;
    	}
    	else if (autoChooser.getSelected().toString().equals("AutoRamp")){
    		Robot.driveTrain.speedMultiplier = 0.90;
    	}
    	else if(autoChooser.getSelected().toString().equals("AutoChivalDeFrise")){
    		Robot.driveTrain.speedMultiplier = 0.65;
    	}
    	else if(autoChooser.getSelected().toString().equals("AutoPortcullis")){
    		Robot.driveTrain.speedMultiplier = 0.55;
    	}
    	else if(autoChooser.getSelected().toString().equals("AutoRamparts")){
    		Robot.driveTrain.speedMultiplier = 1;
    	}
    	else{
        	Robot.driveTrain.speedMultiplier = 0.55;
    	}
    	SmartDashboard.putString("Chooser", autoChooser.getSelected().toString());
        	autonomousCommand.start();
        	
        	
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        Robot.driveTrain.speedMultiplier = 1;
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
